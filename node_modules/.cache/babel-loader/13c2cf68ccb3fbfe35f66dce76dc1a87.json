{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DaneG\\\\Udemy\\\\React_Movie_DB\\\\RMDB_StarterFiles_8\\\\RMDB_StarterFIles\\\\React RMDB - Start Here\\\\src\\\\components\\\\Movie\\\\Movie.js\";\n// import React, { Component } from 'react';\n// import { API_URL, API_KEY } from '../../config';\n// import Navigation from '../elements/Navigation/Navigation'\n// import MovieInfo from '../elements/MovieInfo/MovieInfo';\n// import MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\n// import FourColGrid from '../elements/FourColGrid/FourColGrid.js';\n// import Actor from '../elements/Actor/Actor';\n// import Spinner from '../elements/Spinner/Spinner';\n// import './Movie.css';\n// class Movie extends Component {\n//     state = {\n//         movie: null, \n//         actors: null,\n//         directors: [],\n//         loading: false\n//     }\n//     componentDidMount() {\n//         this.setState( { loading: true })\n//         // first fetch the movie\n//         const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\n//         this.fetchItems(endpoint);\n//     }\n//     fetchItems = (endpoint) => {\n//         fetch(endpoint)\n//         .then(result => result.json())\n//         .then(result => {\n//             console.log(result);\n//             console.log(this.state.movie);\n//             if (result.status_code) {\n//                 // If we don't find any movie\n//                 this.setState({ loading: false });\n//             }else {\n//                 this.setState({ movie: result }, () => {\n//                     // ...then fetch actors in the setState callback function\n//                     const endpoint = `${API_URL}movie/${this.props.match.params.movieid}/credits?api_key=${API_KEY}`\n//                     fetch(endpoint)\n//                     .then(result => result.json())\n//                     .then(result => {\n//                         const directors = result.crew.filter( (member) => member.job === 'Director');\n//                         this.setState({\n//                             actors: result.cast,\n//                             directors: directors,\n//                             loading: false\n//                         })\n//                     })\n//                 })\n//                 .catch(error => console.error('Error:', error))\n//             }\n//         })\n//     }\n//     render() {\n//         return (\n//             <div className=\"rmdb-movie\">\n//                {this.state.movie ? \n//                 <div>\n//                     <Navigation movie={this.props.location.movieName} />  \n//                     <MovieInfo movie={this.state.movie } directors={this.state.directors} />\n//                     <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\n//                 </div>   \n//             : null } \n//             {this.state.actors ? \n//                 <div className=\"rmdb-movie-grid\">\n//                     <FourColGrid header={'Actors'} >\n//                         {this.state.actors.map( (element, i) => {\n//                             return <Actor key={i} actor={element} />\n//                         })}  \n//                         </FourColGrid>\n//                         </div>\n//                         : null }\n//                         {!this.state.actors && !this.state.loading ? <h1>No Movie Found</h1> : null}\n//                         {this.state.loading ? <Spinner /> : null}\n//             </div>\n//         )\n//     }\n// }\n// export default Movie; \nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      // ES6 destructuring the props\n      const {\n        movieId\n      } = this.props.match.params;\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // ... then fetch actors in the setState callback function\n            let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    // ES6 destructuring the props\n    const {\n      movieId\n    } = this.props.match.params;\n\n    if (localStorage.getItem(`${movieId}`)) {\n      let state = JSON.parse(localStorage.getItem(`${movieId}`));\n      this.setState({ ...state\n      });\n    } else {\n      this.setState({\n        loading: true\n      }); // First fetch the movie ...\n\n      let endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    // ES6 Destructuring the props and state\n    const {\n      movieName\n    } = this.props.location;\n    const {\n      movie,\n      directors,\n      actors,\n      loading\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: movie,\n      directors: directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })) : null, actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, actors.map((element, i) => React.createElement(Actor, {\n      key: i,\n      actor: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })))) : null, !actors && !loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"No movie found\") : null, loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:/Users/DaneG/Udemy/React_Movie_DB/RMDB_StarterFiles_8/RMDB_StarterFIles/React RMDB - Start Here/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","movieId","props","match","params","fetch","then","result","json","status_code","setState","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","console","componentDidMount","getItem","parse","render","movieName","location","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\r\n// import { API_URL, API_KEY } from '../../config';\r\n// import Navigation from '../elements/Navigation/Navigation'\r\n// import MovieInfo from '../elements/MovieInfo/MovieInfo';\r\n// import MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\n// import FourColGrid from '../elements/FourColGrid/FourColGrid.js';\r\n// import Actor from '../elements/Actor/Actor';\r\n// import Spinner from '../elements/Spinner/Spinner';\r\n// import './Movie.css';\r\n\r\n// class Movie extends Component {\r\n//     state = {\r\n//         movie: null, \r\n//         actors: null,\r\n//         directors: [],\r\n//         loading: false\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.setState( { loading: true })\r\n//         // first fetch the movie\r\n//         const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\r\n//         this.fetchItems(endpoint);\r\n//     }\r\n\r\n//     fetchItems = (endpoint) => {\r\n//         fetch(endpoint)\r\n//         .then(result => result.json())\r\n//         .then(result => {\r\n//             console.log(result);\r\n//             console.log(this.state.movie);\r\n//             if (result.status_code) {\r\n//                 // If we don't find any movie\r\n//                 this.setState({ loading: false });\r\n//             }else {\r\n//                 this.setState({ movie: result }, () => {\r\n//                     // ...then fetch actors in the setState callback function\r\n//                     const endpoint = `${API_URL}movie/${this.props.match.params.movieid}/credits?api_key=${API_KEY}`\r\n//                     fetch(endpoint)\r\n//                     .then(result => result.json())\r\n//                     .then(result => {\r\n//                         const directors = result.crew.filter( (member) => member.job === 'Director');\r\n\r\n//                         this.setState({\r\n//                             actors: result.cast,\r\n//                             directors: directors,\r\n//                             loading: false\r\n//                         })\r\n//                     })\r\n//                 })\r\n//                 .catch(error => console.error('Error:', error))\r\n//             }\r\n\r\n//         })\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"rmdb-movie\">\r\n//                {this.state.movie ? \r\n//                 <div>\r\n//                     <Navigation movie={this.props.location.movieName} />  \r\n//                     <MovieInfo movie={this.state.movie } directors={this.state.directors} />\r\n//                     <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\r\n//                 </div>   \r\n//             : null } \r\n//             {this.state.actors ? \r\n//                 <div className=\"rmdb-movie-grid\">\r\n//                     <FourColGrid header={'Actors'} >\r\n                        \r\n//                         {this.state.actors.map( (element, i) => {\r\n//                             return <Actor key={i} actor={element} />\r\n//                         })}  \r\n//                         </FourColGrid>\r\n//                         </div>\r\n//                         : null }\r\n//                         {!this.state.actors && !this.state.loading ? <h1>No Movie Found</h1> : null}\r\n//                         {this.state.loading ? <Spinner /> : null}\r\n            \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default Movie; \r\n\r\nimport React, { Component } from 'react';\r\nimport { API_URL, API_KEY } from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation';\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\r\nimport Actor from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movie: null,\r\n    actors: null,\r\n    directors: [],\r\n    loading: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    // ES6 destructuring the props\r\n    const { movieId } = this.props.match.params;\r\n\r\n    if (localStorage.getItem(`${movieId}`)) {\r\n      let state = JSON.parse(localStorage.getItem(`${movieId}`))\r\n      this.setState({ ...state })\r\n    } else {\r\n      this.setState({ loading: true })\r\n      // First fetch the movie ...\r\n      let endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\r\n      this.fetchItems(endpoint);\r\n    }\r\n  }\r\n\r\n  fetchItems = (endpoint) => {\r\n    // ES6 destructuring the props\r\n    const { movieId } = this.props.match.params;\r\n\r\n    fetch(endpoint)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n\r\n      if (result.status_code) {\r\n        // If we don't find any movie\r\n        this.setState({ loading: false });\r\n      } else {\r\n        this.setState({ movie: result }, () => {\r\n          // ... then fetch actors in the setState callback function\r\n          let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n          fetch(endpoint)\r\n          .then(result => result.json())\r\n          .then(result => {\r\n\r\n            const directors = result.crew.filter( (member) => member.job === \"Director\");\r\n\r\n            this.setState({\r\n              actors: result.cast,\r\n              directors,\r\n              loading: false\r\n            }, () => {\r\n              localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\r\n            })\r\n          })\r\n        })\r\n      }\r\n    })\r\n    .catch(error => console.error('Error:', error))\r\n  }\r\n\r\n  render() {\r\n    // ES6 Destructuring the props and state\r\n    const { movieName } = this.props.location;\r\n    const { movie, directors, actors, loading } = this.state;\r\n\r\n    return (\r\n      <div className=\"rmdb-movie\">\r\n        {movie ?\r\n        <div>\r\n          <Navigation movie={movieName} />\r\n          <MovieInfo movie={movie} directors={directors} />\r\n          <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\r\n        </div>\r\n        : null }\r\n        {actors ?\r\n        <div className=\"rmdb-movie-grid\">\r\n          <FourColGrid header={'Actors'}>\r\n            {actors.map( (element, i) => (\r\n              <Actor key={i} actor={element} />\r\n            ))}\r\n          </FourColGrid>\r\n        </div>\r\n        : null }\r\n        {!actors && !loading ? <h1>No movie found</h1> : null }\r\n        {loading ? <Spinner /> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Movie;"]},"metadata":{},"sourceType":"module"}