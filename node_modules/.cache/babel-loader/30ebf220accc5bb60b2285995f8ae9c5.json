{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DaneG\\\\Udemy\\\\React_Movie_DB\\\\RMDB_StarterFiles_8\\\\RMDB_StarterFiles\\\\React RMDB - Start Here\\\\src\\\\components\\\\Movie\\\\Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        console.log(result);\n        console.log(this.state.movie);\n\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // ...then fetch actors in the setState callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === 'Director');\n              this.setState({\n                actors: result.cast,\n                directors: directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n      const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`));\n      this.setState({ ...state\n      });\n    } else {\n      this.setState({\n        loading: true\n      }); // first fetch the movie\n\n      const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"No Movie Found\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:/Users/DaneG/Udemy/React_Movie_DB/RMDB_StarterFiles_8/RMDB_StarterFiles/React RMDB - Start Here/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","componentDidMount","getItem","parse","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { API_URL, API_KEY } from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation'\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\r\nimport Actor from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component {\r\n    state = {\r\n        movie: null,\r\n        actors: null,\r\n        directors: [],\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\r\n            const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`));\r\n            this.setState({ ...state })\r\n        } else {\r\n            this.setState({ loading: true })\r\n            // first fetch the movie\r\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\r\n            this.fetchItems(endpoint);\r\n        }\r\n    }\r\n\r\n    fetchItems = (endpoint) => {\r\n        fetch(endpoint)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                console.log(result);\r\n                console.log(this.state.movie);\r\n                if (result.status_code) {\r\n                    // If we don't find any movie\r\n                    this.setState({ loading: false });\r\n                } else {\r\n                    this.setState({ movie: result }, () => {\r\n                        // ...then fetch actors in the setState callback function\r\n                        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\r\n                        fetch(endpoint)\r\n                            .then(result => result.json())\r\n                            .then(result => {\r\n                                const directors = result.crew.filter((member) => member.job === 'Director');\r\n\r\n                                this.setState({\r\n                                    actors: result.cast,\r\n                                    directors: directors,\r\n                                    loading: false\r\n                                }, () => {\r\n                                    localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state))\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"rmdb-movie\">\r\n                {this.state.movie ?\r\n                    <div>\r\n                        <Navigation movie={this.props.location.movieName} />\r\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors} />\r\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\r\n                    </div>\r\n                    : null}\r\n                {this.state.actors ?\r\n                    <div className=\"rmdb-movie-grid\">\r\n                        <FourColGrid header={'Actors'} >\r\n\r\n                            {this.state.actors.map((element, i) => {\r\n                                return <Actor key={i} actor={element} />\r\n                            })}\r\n                        </FourColGrid>\r\n                    </div>\r\n                    : null}\r\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found</h1> : null}\r\n                {this.state.loading ? <Spinner /> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie;\r\n\r\n"]},"metadata":{},"sourceType":"module"}